generator client {
  provider = "prisma-client-py"
  recursive_type_depth = 5
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// Modelo original de usuarios para autenticación web
model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  hashed_password String
  api_token       String?  @unique
  worlds          World[]
}

model World {
  id           Int           @id @default(autoincrement())
  farm_name    String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  interactions Interaction[]

  @@unique([userId, farm_name])
}

// Modelo original para retrocompatibilidad
model Interaction {
  id                 Int      @id @default(autoincrement())
  npcName            String
  raw_context        String
  generated_dialogue String
  world              World    @relation(fields: [worldId], references: [id])
  worldId            Int
  createdAt          DateTime @default(now())
}

// Nuevos modelos para el sistema de memoria y personalidad

model Player {
  id                  String                    @id @default(cuid())
  name                String                    @unique
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  personalityProfiles PlayerPersonalityProfile[]
  conversations       Conversation[]
  memoryEpisodes      MemoryEpisode[]
  preferences         PlayerPreference[]
  milestones          RelationshipMilestone[]
  emotionalStates     EmotionalState[]
}

model Npc {
  id                  String                    @id @default(cuid())
  name                String                    @unique
  location            String?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  personalityProfiles PlayerPersonalityProfile[]
  conversations       Conversation[]
  emotionalStates     EmotionalState[]
  memoryEpisodes      MemoryEpisode[]
  preferences         PlayerPreference[]
  milestones          RelationshipMilestone[]
}

// Perfil de personalidad que un NPC tiene de un jugador
model PlayerPersonalityProfile {
  id           String  @id @default(cuid())
  playerId     String
  npcId        String
  player       Player  @relation(fields: [playerId], references: [id])
  npc          Npc     @relation(fields: [npcId], references: [id])
  
  // Resumen textual de la personalidad percibida
  summary      String  @db.Text
  
  // Puntuaciones numéricas (0-10) - Métricas básicas de personalidad
  friendliness Float   @default(5.0) // Amistoso vs Hostil
  extroversion Float   @default(5.0) // Extrovertido vs Tímido
  sincerity    Float   @default(5.0) // Sincero vs Sarcástico/Bromista
  curiosity    Float   @default(5.0) // Curioso/Informativo vs Directo/Desinteresado
  
  // Métricas emocionales avanzadas (0-10)
  trust              Float   @default(5.0) // Confianza en el jugador
  respect            Float   @default(5.0) // Respeto hacia el jugador
  affection          Float   @default(3.0) // Cariño/afecto emocional
  annoyance          Float   @default(2.0) // Nivel de irritación
  admiration         Float   @default(3.0) // Admiración hacia el jugador
  romantic_interest  Float   @default(1.0) // Interés romántico (solo para NPCs solteros)
  humor_compatibility Float  @default(5.0) // Compatibilidad de humor/bromas
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([playerId, npcId])
}

// Una sesión de conversación completa
model Conversation {
  id              String          @id @default(cuid())
  startTime       DateTime        @default(now())
  endTime         DateTime?
  playerId        String
  npcId           String
  player          Player          @relation(fields: [playerId], references: [id])
  npc             Npc             @relation(fields: [npcId], references: [id])
  
  // Contexto de la conversación
  season          String?
  dayOfMonth      Int?
  dayOfWeek       Int?
  timeOfDay       Int?
  year            Int?
  weather         String?
  playerLocation  String?
  friendshipHearts Int?
  
  dialogueEntries DialogueEntry[]
}

// Cada línea de diálogo dentro de una conversación
model DialogueEntry {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  speaker        String       // "player" o el nombre del NPC
  message        String       @db.Text
  timestamp      DateTime     @default(now())
  
  // El embedding vectorial del mensaje para búsqueda semántica
  // Usando dimensión 384 para el modelo local `all-MiniLM-L6-v2`
  embedding      Unsupported("vector(384)")?
}

// NEW: Specific memorable events beyond just dialogue
model MemoryEpisode {
  id              String    @id @default(cuid())
  playerId        String
  npcId           String
  player          Player    @relation(fields: [playerId], references: [id])
  npc             Npc       @relation(fields: [npcId], references: [id])
  
  // Event details
  eventType       MemoryType
  title           String    // "Gave me a diamond on my birthday"
  description     String    @db.Text
  emotionalImpact Float     // -10 to +10 (how much this affected the NPC)
  importance      Float     @default(5.0) // 1-10 (how memorable/significant)
  
  // Context
  location        String?
  season          String?
  gameDate        String?   // "Spring 15, Year 1"
  
  // Memory decay
  accessCount     Int       @default(1)   // How often recalled
  lastAccessed    DateTime  @default(now())
  decayRate       Float     @default(1.0) // How fast this memory fades
  
  embedding       Unsupported("vector(384)")?
  createdAt       DateTime  @default(now())
}

// NEW: NPC's emotional state towards a specific player (changes throughout interactions)
model EmotionalState {
  id                String   @id @default(cuid())
  npcId            String
  playerId         String
  npc              Npc      @relation(fields: [npcId], references: [id])
  player           Player   @relation(fields: [playerId], references: [id])
  
  // Current emotional state (changes throughout the day/interactions)
  currentMood      Mood     @default(NEUTRAL)
  moodIntensity    Float    @default(5.0) // 1-10
  
  // Temporary emotional modifiers (last 1-3 conversations)
  recentJoy        Float    @default(0.0) // -5 to +5
  recentSadness    Float    @default(0.0)
  recentAnger      Float    @default(0.0)
  recentAnxiety    Float    @default(0.0)
  recentExcitement Float    @default(0.0)
  
  // Causes of current state
  lastInteractionEffect String? @db.Text
  externalFactors       String? @db.Text // Weather, events, etc.
  
  lastUpdated      DateTime @default(now())
  
  @@unique([npcId, playerId])
}

// NEW: What the NPC learns about the player's preferences
model PlayerPreference {
  id               String      @id @default(cuid())
  playerId         String
  npcId            String
  player           Player      @relation(fields: [playerId], references: [id])
  npc              Npc         @relation(fields: [npcId], references: [id])
  
  category         PreferenceCategory
  item             String      // "Amethyst", "Fishing", "Pierre's Store"
  preference       Float       // -10 to +10 (how much player likes/dislikes)
  confidence       Float       // 0-10 (how sure NPC is about this)
  
  evidenceSource   String      @db.Text // "Gave me 3 amethysts", "Said they hate shopping"
  lastObserved     DateTime    @default(now())
  
  @@unique([playerId, npcId, category, item])
}

// NEW: Relationship milestone tracking
model RelationshipMilestone {
  id          String      @id @default(cuid())
  playerId    String
  npcId       String
  player      Player      @relation(fields: [playerId], references: [id])
  npc         Npc         @relation(fields: [npcId], references: [id])
  
  milestone   MilestoneType
  description String      @db.Text
  gameDate    String?     // "Spring 15, Year 1"
  heartLevel  Int?        // Friendship level when reached
  
  achieved    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  
  @@unique([playerId, npcId, milestone])
}

// ENUMS for the new system

enum MemoryType {
  GIFT_RECEIVED
  GIFT_GIVEN
  SHARED_ACTIVITY
  EMOTIONAL_MOMENT
  FAVOR_ASKED
  FAVOR_DONE
  CONFLICT
  COMPLIMENT
  INSULT
  ROMANTIC_MOMENT
  ACHIEVEMENT_SHARED
  SECRET_TOLD
  BETRAYAL
  SUPPORT_GIVEN
  SUPPORT_RECEIVED
}

enum Mood {
  VERY_HAPPY
  HAPPY
  CONTENT
  NEUTRAL
  WORRIED
  SAD
  ANGRY
  EXCITED
  ROMANTIC
  NOSTALGIC
  STRESSED
}

enum PreferenceCategory {
  GIFTS
  ACTIVITIES
  PEOPLE
  PLACES
  TOPICS
  FOODS
  SEASONS
  WEATHER
}

enum MilestoneType {
  FIRST_MEETING
  FIRST_GIFT
  FIRST_CONVERSATION
  BECAME_FRIENDS
  FIRST_SECRET_SHARED
  FIRST_FAVOR
  FIRST_CONFLICT
  ROMANTIC_INTEREST_SPARKED
  FIRST_DATE
  RELATIONSHIP_OFFICIAL
  MARRIED
  BEST_FRIENDS
  RIVAL_RELATIONSHIP
}
